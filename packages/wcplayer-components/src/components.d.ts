/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { VideoStatus } from "./constants";
export namespace Components {
    interface WcControls {
        "getNativeVideo": () => HTMLVideoElement;
        "getPlayerElement": () => HTMLElement;
    }
    interface WcFullscreenToggle {
        "target": HTMLElement;
    }
    interface WcLayers {
    }
    interface WcMuteToggle {
        "isMuted": boolean;
    }
    interface WcPictureInPictureToggle {
        "nativeVideo": HTMLVideoElement;
    }
    interface WcPlayPauseLayer {
    }
    interface WcPlayToggle {
        "status": VideoStatus;
    }
    interface WcPlayer {
        "autoplay": boolean;
        "controls": boolean;
        "muted": boolean;
        "poster": string;
        "src": string;
    }
    interface WcProgress {
        "currentTime": number;
        "duration": number;
    }
    interface WcSpacer {
    }
    interface WcTime {
        "currentTime": number;
        "duration": number;
    }
    interface WcVolume {
        "currentVolume": number;
        "isMuted": boolean;
    }
    interface WcVolumeControl {
        "isMuted": boolean;
        "volume": number;
    }
}
export interface WcLayersCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWcLayersElement;
}
export interface WcProgressCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWcProgressElement;
}
export interface WcVolumeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWcVolumeElement;
}
export interface WcVolumeControlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWcVolumeControlElement;
}
declare global {
    interface HTMLWcControlsElement extends Components.WcControls, HTMLStencilElement {
    }
    var HTMLWcControlsElement: {
        prototype: HTMLWcControlsElement;
        new (): HTMLWcControlsElement;
    };
    interface HTMLWcFullscreenToggleElement extends Components.WcFullscreenToggle, HTMLStencilElement {
    }
    var HTMLWcFullscreenToggleElement: {
        prototype: HTMLWcFullscreenToggleElement;
        new (): HTMLWcFullscreenToggleElement;
    };
    interface HTMLWcLayersElement extends Components.WcLayers, HTMLStencilElement {
    }
    var HTMLWcLayersElement: {
        prototype: HTMLWcLayersElement;
        new (): HTMLWcLayersElement;
    };
    interface HTMLWcMuteToggleElement extends Components.WcMuteToggle, HTMLStencilElement {
    }
    var HTMLWcMuteToggleElement: {
        prototype: HTMLWcMuteToggleElement;
        new (): HTMLWcMuteToggleElement;
    };
    interface HTMLWcPictureInPictureToggleElement extends Components.WcPictureInPictureToggle, HTMLStencilElement {
    }
    var HTMLWcPictureInPictureToggleElement: {
        prototype: HTMLWcPictureInPictureToggleElement;
        new (): HTMLWcPictureInPictureToggleElement;
    };
    interface HTMLWcPlayPauseLayerElement extends Components.WcPlayPauseLayer, HTMLStencilElement {
    }
    var HTMLWcPlayPauseLayerElement: {
        prototype: HTMLWcPlayPauseLayerElement;
        new (): HTMLWcPlayPauseLayerElement;
    };
    interface HTMLWcPlayToggleElement extends Components.WcPlayToggle, HTMLStencilElement {
    }
    var HTMLWcPlayToggleElement: {
        prototype: HTMLWcPlayToggleElement;
        new (): HTMLWcPlayToggleElement;
    };
    interface HTMLWcPlayerElement extends Components.WcPlayer, HTMLStencilElement {
    }
    var HTMLWcPlayerElement: {
        prototype: HTMLWcPlayerElement;
        new (): HTMLWcPlayerElement;
    };
    interface HTMLWcProgressElement extends Components.WcProgress, HTMLStencilElement {
    }
    var HTMLWcProgressElement: {
        prototype: HTMLWcProgressElement;
        new (): HTMLWcProgressElement;
    };
    interface HTMLWcSpacerElement extends Components.WcSpacer, HTMLStencilElement {
    }
    var HTMLWcSpacerElement: {
        prototype: HTMLWcSpacerElement;
        new (): HTMLWcSpacerElement;
    };
    interface HTMLWcTimeElement extends Components.WcTime, HTMLStencilElement {
    }
    var HTMLWcTimeElement: {
        prototype: HTMLWcTimeElement;
        new (): HTMLWcTimeElement;
    };
    interface HTMLWcVolumeElement extends Components.WcVolume, HTMLStencilElement {
    }
    var HTMLWcVolumeElement: {
        prototype: HTMLWcVolumeElement;
        new (): HTMLWcVolumeElement;
    };
    interface HTMLWcVolumeControlElement extends Components.WcVolumeControl, HTMLStencilElement {
    }
    var HTMLWcVolumeControlElement: {
        prototype: HTMLWcVolumeControlElement;
        new (): HTMLWcVolumeControlElement;
    };
    interface HTMLElementTagNameMap {
        "wc-controls": HTMLWcControlsElement;
        "wc-fullscreen-toggle": HTMLWcFullscreenToggleElement;
        "wc-layers": HTMLWcLayersElement;
        "wc-mute-toggle": HTMLWcMuteToggleElement;
        "wc-picture-in-picture-toggle": HTMLWcPictureInPictureToggleElement;
        "wc-play-pause-layer": HTMLWcPlayPauseLayerElement;
        "wc-play-toggle": HTMLWcPlayToggleElement;
        "wc-player": HTMLWcPlayerElement;
        "wc-progress": HTMLWcProgressElement;
        "wc-spacer": HTMLWcSpacerElement;
        "wc-time": HTMLWcTimeElement;
        "wc-volume": HTMLWcVolumeElement;
        "wc-volume-control": HTMLWcVolumeControlElement;
    }
}
declare namespace LocalJSX {
    interface WcControls {
        "getNativeVideo"?: () => HTMLVideoElement;
        "getPlayerElement"?: () => HTMLElement;
    }
    interface WcFullscreenToggle {
        "target"?: HTMLElement;
    }
    interface WcLayers {
        "onDoubleClick"?: (event: WcLayersCustomEvent<any>) => void;
        "onSingleClick"?: (event: WcLayersCustomEvent<any>) => void;
    }
    interface WcMuteToggle {
        "isMuted"?: boolean;
    }
    interface WcPictureInPictureToggle {
        "nativeVideo"?: HTMLVideoElement;
    }
    interface WcPlayPauseLayer {
    }
    interface WcPlayToggle {
        "status"?: VideoStatus;
    }
    interface WcPlayer {
        "autoplay"?: boolean;
        "controls"?: boolean;
        "muted"?: boolean;
        "poster"?: string;
        "src"?: string;
    }
    interface WcProgress {
        "currentTime"?: number;
        "duration"?: number;
        "onSeeked"?: (event: WcProgressCustomEvent<any>) => void;
        "onSeeking"?: (event: WcProgressCustomEvent<any>) => void;
    }
    interface WcSpacer {
    }
    interface WcTime {
        "currentTime"?: number;
        "duration"?: number;
    }
    interface WcVolume {
        "currentVolume"?: number;
        "isMuted"?: boolean;
        "onVolumechange"?: (event: WcVolumeCustomEvent<any>) => void;
    }
    interface WcVolumeControl {
        "isMuted"?: boolean;
        "onToggleMute"?: (event: WcVolumeControlCustomEvent<any>) => void;
        "onVolumeChange"?: (event: WcVolumeControlCustomEvent<any>) => void;
        "volume"?: number;
    }
    interface IntrinsicElements {
        "wc-controls": WcControls;
        "wc-fullscreen-toggle": WcFullscreenToggle;
        "wc-layers": WcLayers;
        "wc-mute-toggle": WcMuteToggle;
        "wc-picture-in-picture-toggle": WcPictureInPictureToggle;
        "wc-play-pause-layer": WcPlayPauseLayer;
        "wc-play-toggle": WcPlayToggle;
        "wc-player": WcPlayer;
        "wc-progress": WcProgress;
        "wc-spacer": WcSpacer;
        "wc-time": WcTime;
        "wc-volume": WcVolume;
        "wc-volume-control": WcVolumeControl;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "wc-controls": LocalJSX.WcControls & JSXBase.HTMLAttributes<HTMLWcControlsElement>;
            "wc-fullscreen-toggle": LocalJSX.WcFullscreenToggle & JSXBase.HTMLAttributes<HTMLWcFullscreenToggleElement>;
            "wc-layers": LocalJSX.WcLayers & JSXBase.HTMLAttributes<HTMLWcLayersElement>;
            "wc-mute-toggle": LocalJSX.WcMuteToggle & JSXBase.HTMLAttributes<HTMLWcMuteToggleElement>;
            "wc-picture-in-picture-toggle": LocalJSX.WcPictureInPictureToggle & JSXBase.HTMLAttributes<HTMLWcPictureInPictureToggleElement>;
            "wc-play-pause-layer": LocalJSX.WcPlayPauseLayer & JSXBase.HTMLAttributes<HTMLWcPlayPauseLayerElement>;
            "wc-play-toggle": LocalJSX.WcPlayToggle & JSXBase.HTMLAttributes<HTMLWcPlayToggleElement>;
            "wc-player": LocalJSX.WcPlayer & JSXBase.HTMLAttributes<HTMLWcPlayerElement>;
            "wc-progress": LocalJSX.WcProgress & JSXBase.HTMLAttributes<HTMLWcProgressElement>;
            "wc-spacer": LocalJSX.WcSpacer & JSXBase.HTMLAttributes<HTMLWcSpacerElement>;
            "wc-time": LocalJSX.WcTime & JSXBase.HTMLAttributes<HTMLWcTimeElement>;
            "wc-volume": LocalJSX.WcVolume & JSXBase.HTMLAttributes<HTMLWcVolumeElement>;
            "wc-volume-control": LocalJSX.WcVolumeControl & JSXBase.HTMLAttributes<HTMLWcVolumeControlElement>;
        }
    }
}
